---
import { getLanguageFromURL, useTranslations, getRelativeURL } from '../i18n/utils';
import { supportedLanguages } from '../i18n/config';
import type { NavTranslations, CommonTranslations } from '../i18n/types';

const { pathname } = Astro.url;
const lang = getLanguageFromURL(pathname);
const t = useTranslations(lang);

const navTranslations = await t('nav') as NavTranslations;
const commonTranslations = await t('common') as CommonTranslations;

const navItems = [
  { href: `/${lang}/works`, label: navTranslations.works },
  { href: `/${lang}/blog`, label: navTranslations.blog },
  { href: `/${lang}/services`, label: navTranslations.services },
];

const getLanguageUrl = (newLang: string) => {
  return getRelativeURL(pathname, newLang as keyof typeof supportedLanguages);
};

const isRTL = lang === 'ar';
---

<header class="fixed w-full top-0 z-50 bg-white/90 dark:bg-black/90 backdrop-blur-md border-b border-gray-200/50 dark:border-gray-800/50 transition-colors duration-200" dir={isRTL ? 'rtl' : 'ltr'}>  <div class="container mx-auto px-4 md:px-6">
    <div class="flex h-16 items-center justify-between">
      <!-- Left Section: Logo + Theme Toggle -->
      <div class={`flex items-center ${isRTL ? 'space-x-reverse' : 'space-x-2'}`}>
        <a href={`/${lang}`} class="flex items-center">
          <img src="/images/veblabslogoblue.webp" alt="VebLabs Logo" class="w-6 h-6 p-1" />
          {isRTL ? (
            <span class="text-xl font-bold">
              <span class="text-light-textPrimary dark:text-dark-textPrimary">فيب</span>
              <span class="text-light-primary dark:text-dark-primary">لابز</span>
            </span>
          ) : (
            <span class="text-xl font-bold">
              <span class="text-light-textPrimary dark:text-dark-textPrimary">veb</span>
              <span class="text-light-primary dark:text-dark-primary">Labs</span>
            </span>
          )}
        </a>
        
        <!-- Theme Toggle -->
        <button
          type="button"
          id="theme-toggle"
          class="p-2 text-light-textSecondary dark:text-dark-textSecondary hover:text-light-primary dark:hover:text-dark-primary transition-colors"
          aria-label="Toggle theme"
        >
          <svg id="theme-toggle-light-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" />
          </svg>
          <svg id="theme-toggle-dark-icon" class="hidden w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z" />
          </svg>
        </button>
      </div>

      <!-- Center Section: Navigation Links (Desktop Only) -->
      <nav class="hidden md:flex items-center justify-center flex-1 mx-4">
        <div class="hidden lg:flex items-center gap-8">
          {navItems.map(item => (
            <a 
              href={item.href}
              class="text-sm font-medium text-light-textSecondary dark:text-dark-textSecondary hover:text-light-primary dark:hover:text-dark-primary transition-colors"
            >
              {item.label}
            </a>
          ))}
        </div>
      </nav>

      <!-- Right Section: CTA + Language (Desktop) / Language + Menu (Mobile) -->
      <div class={`flex items-center ${isRTL ? 'space-x-4 space-x-reverse' : 'space-x-4'}`}>
        <!-- Language Switcher -->
        <div class="relative">
          <button
            type="button"
            class="inline-flex items-center justify-center p-2 text-sm font-medium text-light-textSecondary dark:text-dark-textSecondary hover:text-light-primary dark:hover:text-dark-primary transition-colors"
            id="language-menu-button"
            aria-expanded="false"
            aria-haspopup="true"
          >
            <span class={`${isRTL ? 'font-arabic' : ''}`}>{supportedLanguages[lang]}</span>
            <svg class={`h-4 w-4 ${isRTL ? 'mr-1' : 'ml-1'}`} viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </button>

          <div
            id="language-menu"
            class={`hidden absolute ${isRTL ? 'left-0' : 'right-0'} z-10 mt-2 w-32 rounded-md bg-white dark:bg-dark-background shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none`}
            role="menu"
          >
            <div class="py-1" role="none">
              {Object.entries(supportedLanguages).map(([code, label]) => (
                <a
                  href={getLanguageUrl(code)}
                  class={`${
                    code === lang
                      ? 'bg-light-border/50 dark:bg-dark-border/50 text-light-primary dark:text-dark-primary'
                      : 'text-light-textPrimary dark:text-dark-textPrimary'
                  } block px-4 py-2 text-sm hover:bg-light-border/50 dark:hover:bg-dark-border/50 ${code === 'ar' ? 'font-arabic' : ''}`}
                  role="menuitem"
                >
                  <div class={`flex items-center justify-between ${code === 'ar' ? 'flex-row-reverse' : 'flex-row'}`}>
                    <span class={code === 'ar' ? 'text-right' : 'text-left'}>{code === 'ar' ? 'العربية' : 'English'}</span>
                    {code === lang && (
                      <svg class="w-5 h-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                      </svg>
                    )}
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>

        <!-- CTA Button (Desktop Only) -->
        <a
          href={`/${lang}/get-in-touch`}
          class="hidden md:inline-flex items-center justify-center px-5 py-2.5 text-sm font-semibold text-white bg-gradient-to-r from-light-primary via-blue-500 to-purple-600 dark:from-blue-900 dark:via-blue-700 dark:to-purple-900 hover:scale-105 transition-all duration-300 rounded-lg shadow-md hover:shadow-lg hover:shadow-blue-500/25 dark:hover:shadow-blue-700/40 relative overflow-hidden group"
        >
          <span class="relative z-10 flex items-center gap-1">
            {navTranslations.cta}
            <svg class={`w-4 h-4 transition-transform duration-300 ${isRTL ? 'group-hover:-translate-x-1 rotate-180' : 'group-hover:translate-x-1'}`} viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </span>
          <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/25 to-white/0 dark:from-white/0 dark:via-white/5 dark:to-white/0 transform translate-x-[-100%] animate-shimmer"></div>
        </a>

        <!-- Mobile Menu Button -->
        <button
          type="button"
          class="md:hidden inline-flex items-center justify-center p-2 rounded-md text-light-textSecondary dark:text-dark-textSecondary hover:text-light-primary dark:hover:text-dark-primary transition-colors"
          aria-controls="mobile-menu"
          aria-expanded="false"
          id="mobile-menu-button"
        >
          <span class="sr-only">Open main menu</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="lg:hidden fixed inset-0 z-50 bg-white dark:bg-gray-900 transform translate-x-full transition-transform duration-300 ease-in-out"
    style="background-color: var(--bg-color);"
  >
    <div class="flex flex-col h-full bg-white dark:bg-gray-900">
      <div class="flex items-center justify-between p-4 border-b border-gray-100 dark:border-gray-800">
        <div class="flex items-center">
          <img src="/images/veblabslogoblue.webp" alt="Logo" class="h-4 w-auto" />
          {isRTL ? (
            <span class="text-xl font-bold">
              <span class="text-light-textPrimary dark:text-dark-textPrimary">فيب</span>
              <span class="text-light-primary dark:text-dark-primary">لابز</span>
            </span>
          ) : (
            <span class="text-xl font-bold">
              <span class="text-light-textPrimary dark:text-dark-textPrimary">veb</span>
              <span class="text-light-primary dark:text-dark-primary">Labs</span>
            </span>
          )}
        </div>
        <button
          id="close-menu"
          class="p-2 text-gray-500 hover:text-gray-600 dark:text-gray-400 dark:hover:text-gray-300"
          aria-label={commonTranslations.closeMenu}
          aria-expanded="true"
          type="button"
        >
          <svg 
            class="w-6 h-6" 
            fill="none" 
            viewBox="0 0 24 24" 
            stroke="currentColor"
            aria-hidden="true"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
          <span class="sr-only">{commonTranslations.closeMenu}</span>
        </button>
      </div>
      <nav class="flex-1 px-4 py-6 bg-white dark:bg-gray-900">
        <div class="flex flex-col space-y-6">
          {navItems.map(item => (
            <a
              href={item.href}
              class="text-lg font-medium text-gray-600 hover:text-gray-900 dark:text-gray-300 dark:hover:text-white transition-colors duration-200 px-4 py-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800"
            >
              {item.label}
            </a>
          ))}
          <a
            href={`/${lang}/get-in-touch`}
            class="text-lg font-medium px-4 py-2 text-white bg-gradient-to-r from-light-primary via-blue-500 to-purple-600 dark:from-blue-900 dark:via-blue-700 dark:to-purple-900 hover:scale-105 transition-all duration-300 rounded-lg shadow-md hover:shadow-lg hover:shadow-blue-500/25 dark:hover:shadow-blue-700/40 text-center"
          >
            {navTranslations.cta}
          </a>
        </div>
      </nav>
    </div>
  </div>
</header>

<style>
  @keyframes shimmer {
    100% {
      transform: translateX(100%);
    }
  }

  :root {
    --bg-color: #ffffff;
  }

  [data-theme="dark"] {
    --bg-color: #111827;
  }

  .animate-shimmer {
    animation: shimmer 2s infinite;
  }
</style>

<script>
  // Theme toggle logic
  const themeToggle = document.getElementById('theme-toggle');
  const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
  const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');

  // Set initial theme
  if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    document.documentElement.classList.add('dark');
    themeToggleLightIcon?.classList.remove('hidden');
    themeToggleDarkIcon?.classList.add('hidden');
  } else {
    document.documentElement.classList.remove('dark');
    themeToggleLightIcon?.classList.add('hidden');
    themeToggleDarkIcon?.classList.remove('hidden');
  }

  themeToggle?.addEventListener('click', function() {
    if (document.documentElement.classList.contains('dark')) {
      document.documentElement.classList.remove('dark');
      localStorage.theme = 'light';
      themeToggleLightIcon?.classList.add('hidden');
      themeToggleDarkIcon?.classList.remove('hidden');
    } else {
      document.documentElement.classList.add('dark');
      localStorage.theme = 'dark';
      themeToggleLightIcon?.classList.remove('hidden');
      themeToggleDarkIcon?.classList.add('hidden');
    }
  });

  // Language menu toggle
  const languageMenuButton = document.getElementById('language-menu-button');
  const languageMenu = document.getElementById('language-menu');

  if (languageMenuButton && languageMenu) {
    languageMenuButton.addEventListener('click', () => {
      const expanded = languageMenuButton.getAttribute('aria-expanded') === 'true';
      languageMenuButton.setAttribute('aria-expanded', (!expanded).toString());
      languageMenu.classList.toggle('hidden');
    });

    document.addEventListener('click', (event) => {
      if (!languageMenuButton.contains(event.target as Node) && !languageMenu.contains(event.target as Node)) {
        languageMenuButton.setAttribute('aria-expanded', 'false');
        languageMenu.classList.add('hidden');
      }
    });

    languageMenu.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        languageMenuButton.setAttribute('aria-expanded', 'false');
        languageMenu.classList.add('hidden');
        languageMenuButton.focus();
      }
    });
  }

  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const closeMenuButton = document.getElementById('close-menu');
  const mobileMenu = document.getElementById('mobile-menu') as HTMLElement;

  function toggleMenu() {
    if (!mobileMenu) return;
    const isOpen = mobileMenu.classList.contains('translate-x-0');
    mobileMenu.classList.toggle('translate-x-0', !isOpen);
    mobileMenu.classList.toggle('translate-x-full', isOpen);
    document.body.style.overflow = isOpen ? '' : 'hidden';
  }

  mobileMenuButton?.addEventListener('click', toggleMenu);
  closeMenuButton?.addEventListener('click', toggleMenu);

  // Close menu when clicking outside
  mobileMenu?.addEventListener('click', (e) => {
    if (e.target === mobileMenu) {
      toggleMenu();
    }
  });

  // Close menu on escape key
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && mobileMenu?.classList.contains('translate-x-0')) {
      toggleMenu();
    }
  });
</script>