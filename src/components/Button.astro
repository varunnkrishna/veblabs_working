---
// Button.astro
import { getLanguageFromURL } from '../i18n/utils';

export interface Props {
  href: string;
  variant: 'primary' | 'secondary';
  text: string;
}

const { href, variant, text } = Astro.props;
const lang = getLanguageFromURL(Astro.url.pathname);
const isRtl = lang === 'ar';

// Define variant-specific classes
const baseClass =
  'inline-flex items-center justify-center px-8 py-4 text-lg font-medium rounded-lg transform transition-all duration-300';

const variantClasses = {
  primary:
    'text-white bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl hover:scale-[1.02]',
  secondary:
    'text-gray-900 dark:text-white bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-600 hover:scale-105 hover:shadow-lg',
}[variant];

const fontClass = isRtl ? 'font-arabic' : 'font-sans';
---
<a href={href} class:list={[baseClass, variantClasses, fontClass, "group"]}>
  {isRtl && (
    <svg
      class="w-5 h-5 ml-0 mr-2 transform rotate-180 group-hover:-translate-x-1 transition-transform"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M17 8l4 4m0 0l-4 4m4-4H3"
      />
    </svg>
  )}
  {text}
  {!isRtl && (
    <svg
      class="w-5 h-5 ml-2 transform group-hover:translate-x-1 transition-transform"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M17 8l4 4m0 0l-4 4m4-4H3"
      />
    </svg>
  )}
</a>
