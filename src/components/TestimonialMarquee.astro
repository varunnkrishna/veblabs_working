---
import { getCollection } from 'astro:content';
const testimonials = await getCollection('testimonials');
const duplicatedTestimonials = [...testimonials, ...testimonials]; // Duplicate for seamless loop
---

<div class="testimonials-container overflow-hidden py-20 bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
  <div class="marquee-wrapper relative">
    <div class="marquee flex gap-8" data-speed="1">
      {duplicatedTestimonials.map((testimonial) => (
        <div class="testimonial-card flex-shrink-0 w-[400px] p-8 rounded-2xl bg-white dark:bg-gray-800 shadow-[0_15px_40px_-15px_rgba(0,0,0,0.1)] dark:shadow-[0_15px_40px_-15px_rgba(0,0,0,0.2)] transform hover:scale-[1.02] transition-transform duration-300">
          <div class="flex flex-col h-full">
            <div class="mb-6">
              <svg class="w-10 h-10 text-purple-500 dark:text-purple-400" fill="currentColor" viewBox="0 0 24 24">
                <path d="M4.583 17.321C3.553 16.227 3 15 3 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 01-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179zm10 0C13.553 16.227 13 15 13 13.011c0-3.5 2.457-6.637 6.03-8.188l.893 1.378c-3.335 1.804-3.987 4.145-4.247 5.621.537-.278 1.24-.375 1.929-.311 1.804.167 3.226 1.648 3.226 3.489a3.5 3.5 0 01-3.5 3.5c-1.073 0-2.099-.49-2.748-1.179z"/>
              </svg>
            </div>
            <p class="flex-grow text-lg leading-relaxed text-gray-700 dark:text-gray-300 mb-6">
              {testimonial.data.testimonial}
            </p>
            <div class="flex items-center">
              <div class="relative w-12 h-12">
                <img
                  src={testimonial.data.avatar}
                  alt={testimonial.data.author}
                  class="rounded-full object-cover w-full h-full"
                />
                <div class="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-white dark:border-gray-800"></div>
              </div>
              <div class="ml-4">
                <h4 class="font-semibold text-gray-900 dark:text-white">
                  {testimonial.data.author}
                </h4>
                <p class="text-sm text-gray-600 dark:text-gray-400">
                  {testimonial.data.role} Â· {testimonial.data.company}
                </p>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
import { gsap } from 'gsap';

// Marquee animation
const marqueeElements = document.querySelectorAll('.marquee');

marqueeElements.forEach((element) => {
  const marqueeElement = element as HTMLElement; // Explicitly cast to HTMLElement
  const marqueeSpeed = parseFloat(marqueeElement.dataset.speed || "1");
  const marqueeWidth = marqueeElement.offsetWidth;

  // Set up GSAP animation for marquee effect
  gsap.to(marqueeElement, {
    x: -marqueeWidth, // Move the entire width of the marquee
    duration: marqueeWidth / 50 / marqueeSpeed, // Adjust duration based on speed
    repeat: -1, // Infinite repeat
    ease: 'none', // Smooth, linear scrolling
  });
});

// Pause on hover
marqueeElements.forEach((element) => {
  const marqueeElement = element as HTMLElement;

  marqueeElement.addEventListener('mouseenter', () => {
    gsap.to(marqueeElement, { timeScale: 0, duration: 0.5 }); // Pause animation
  });

  marqueeElement.addEventListener('mouseleave', () => {
    gsap.to(marqueeElement, { timeScale: 1, duration: 0.5 }); // Resume animation
  });
});




</script>

<style>
  .testimonials-container {
    mask-image: linear-gradient(
      to right,
      transparent,
      black 10%,
      black 90%,
      transparent
    );
  }

  .marquee-wrapper {
    display: flex;
    width: 100%;
  }

  .marquee {
    will-change: transform;
  }
</style>