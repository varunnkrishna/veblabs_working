---
// Optional: Import Zod for additional validation if needed
import { z } from 'zod';
---

<form id="contactForm" class="space-y-6">
  <div class="grid md:grid-cols-2 gap-6">
    <div>
      <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Name</label>
      <input
        type="text"
        id="name"
        name="name"
        required
        minlength="2"
        class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary"
      />
      <span id="nameError" class="text-red-500 text-sm hidden"></span>
    </div>
    <div>
      <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
      <input
        type="email"
        id="email"
        name="email"
        required
        class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary"
      />
      <span id="emailError" class="text-red-500 text-sm hidden"></span>
    </div>
  </div>
  <div class="grid md:grid-cols-2 gap-6">
    <div>
      <label for="phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Phone Number</label>
      <input
        type="tel"
        id="phone"
        name="phone"
        pattern="[0-9]{10}"
        required
        placeholder="10-digit phone number"
        class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary"
      />
      <span id="phoneError" class="text-red-500 text-sm hidden"></span>
    </div>
    <div>
      <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Subject</label>
      <input
        type="text"
        id="subject"
        name="subject"
        required
        class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary"
      />
      <span id="subjectError" class="text-red-500 text-sm hidden"></span>
    </div>
  </div>
  <div>
    <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Message</label>
    <textarea
      id="message"
      name="message"
      rows="6"
      required
      minlength="10"
      class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary"
    ></textarea>
    <span id="messageError" class="text-red-500 text-sm hidden"></span>
  </div>
  <button
    type="submit"
    class="w-full px-6 py-3 bg-primary text-white font-medium rounded-lg hover:bg-primary/90 transition-colors"
  >
    Send Message
  </button>
  <div id="formStatus" class="text-center"></div>
</form>

<script>
document.getElementById('contactForm')?.addEventListener('submit', async (e) => {
  e.preventDefault();
  const form = e.target as HTMLFormElement;
  const formData = new FormData(form);
  const statusEl = document.getElementById('formStatus');

  // Reset previous errors and status
  ['name', 'email', 'phone', 'subject', 'message'].forEach(field => {
    const errorEl = document.getElementById(`${field}Error`);
    if (errorEl) {
      errorEl.textContent = '';
      errorEl.classList.add('hidden');
    }
  });

  statusEl!.textContent = '';
  statusEl!.className = '';

  // Custom validation
  let isValid = true;
  const phoneInput = document.getElementById('phone') as HTMLInputElement;
  const phoneRegex = /^[0-9]{10}$/;

  if (!phoneRegex.test(phoneInput.value)) {
    const phoneError = document.getElementById('phoneError');
    if (phoneError) {
      phoneError.textContent = 'Please enter a valid 10-digit phone number';
      phoneError.classList.remove('hidden');
      isValid = false;
    }
  }

  if (!isValid) return;

  try {
    const response = await fetch('/api/send', {
      method: 'POST',
      body: formData
    });

    const result = await response.json();

    if (response.ok) {
      statusEl!.textContent = 'Message sent successfully!';
      statusEl!.className = 'text-green-500';
      form.reset();
    } else {
      statusEl!.textContent = result.error || 'Failed to send message';
      statusEl!.className = 'text-red-500';
    }
  } catch (error) {
    statusEl!.textContent = 'An error occurred. Please try again.';
    statusEl!.className = 'text-red-500';
  }
});
</script>