---
interface Props {
  lang: string;
}

const { lang } = Astro.props;
const isRtl = lang === 'ar';

type Translation = {
  name: string;
  namePlaceholder: string;
  email: string;
  emailPlaceholder: string;
  phone: string;
  phonePlaceholder: string;
  message: string;
  messagePlaceholder: string;
  sendMessage: string;
  sending: string;
  messageSent: string;
  required: string;
  minLength: string;
  invalidEmail: string;
  invalidPhone: string;
}

type Translations = {
  en: Translation;
  ar: Translation;
}

const translations: Translations = {
  en: {
    name: "Name",
    namePlaceholder: "Your name",
    email: "Email",
    emailPlaceholder: "your.email@example.com",
    phone: "Phone Number",
    phonePlaceholder: "Phone number",
    message: "Message",
    messagePlaceholder: "Your message here...",
    sendMessage: "Send Message",
    sending: "Sending...",
    messageSent: "Message Sent!",
    required: "This field is required",
    minLength: "Must be at least {0} characters",
    invalidEmail: "Please enter a valid email address",
    invalidPhone: "Please enter a valid phone number (6-14 digits)"
  },
  ar: {
    name: "الاسم",
    namePlaceholder: "اسمك",
    email: "البريد الإلكتروني",
    emailPlaceholder: "example@email.com",
    phone: "رقم الهاتف",
    phonePlaceholder: "رقم الهاتف",
    message: "الرسالة",
    messagePlaceholder: "اكتب رسالتك هنا...",
    sendMessage: "إرسال الرسالة",
    sending: "جاري الإرسال...",
    messageSent: "تم الإرسال!",
    required: "هذا الحقل مطلوب",
    minLength: "يجب أن يكون {0} أحرف على الأقل",
    invalidEmail: "يرجى إدخال بريد إلكتروني صحيح",
    invalidPhone: "يرجى إدخال رقم هاتف صحيح (6-14 رقم)"
  }
};

const t = translations[lang as keyof typeof translations] || translations.en;
---

<form id="contactForm" class:list={["space-y-6", { "text-right": isRtl }]} dir={isRtl ? "rtl" : "ltr"}>
  <div class="form-group">
    <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t.name}</label>
    <input
      type="text"
      id="name"
      name="name"
      required
      minlength="2"
      class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
      placeholder={t.namePlaceholder}
    />
    <span class="error-message text-sm text-red-500 mt-1 hidden"></span>
  </div>

  <div class="form-group">
    <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t.email}</label>
    <input
      type="email"
      id="email"
      name="email"
      required
      class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
      placeholder={t.emailPlaceholder}
    />
    <span class="error-message text-sm text-red-500 mt-1 hidden"></span>
  </div>

  <div class="form-group">
    <label for="phone" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t.phone}</label>
    <div class:list={["flex", { "space-x-2": !isRtl, "space-x-reverse space-x-2": isRtl }]}>
      <select
        id="countryCode"
        name="countryCode"
        required
        class="w-32 px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
      >
        <option value="+971">+971 (UAE)</option>
        <option value="+966">+966 (KSA)</option>
        <option value="+974">+974 (QA)</option>
        <option value="+973">+973 (BH)</option>
        <option value="+968">+968 (OM)</option>
        <option value="+965">+965 (KW)</option>
        <option value="+91">+91 (IN)</option>
        <option value="+44">+44 (UK)</option>
        <option value="+1">+1 (US)</option>
        <option value="+86">+86 (CN)</option>
        <option value="+65">+65 (SG)</option>
      </select>
      <input
        type="tel"
        id="phone"
        name="phone"
        required
        pattern="[0-9]{6,14}"
        class="flex-1 px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-primary transition-colors"
        placeholder={t.phonePlaceholder}
      />
    </div>
    <span class="error-message text-sm text-red-500 mt-1 hidden"></span>
  </div>

  <div class="form-group">
    <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">{t.message}</label>
    <textarea
      id="message"
      name="message"
      rows="6"
      required
      minlength="10"
      class="w-full px-4 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-primary transition-colors resize-y"
      placeholder={t.messagePlaceholder}
    ></textarea>
    <span class="error-message text-sm text-red-500 mt-1 hidden"></span>
  </div>

  <button
    type="submit"
    class="w-full px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed relative group bg-gradient-to-r from-light-primary via-light-secondary to-light-primary dark:from-dark-primary dark:via-dark-secondary dark:to-dark-primary bg-[length:200%_auto] hover:bg-right-bottom"
  >
    <span class:list={["inline-flex items-center transition-opacity duration-200", { "flex-row-reverse": isRtl }]}>
      <span class="submit-text">{t.sendMessage}</span>
      <svg class:list={["submit-spinner h-5 w-5 animate-spin hidden", { "mr-3": isRtl, "ml-3": !isRtl }]} xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
    </span>
  </button>

  <div id="formStatus" class="text-center opacity-0 transition-all duration-300 transform translate-y-2"></div>
</form>

<script>
interface FormField extends HTMLElement {
  value: string;
  type?: string;
  minLength?: number;
}

interface FormResponse {
  success: boolean;
  message?: string;
  error?: string;
  details?: string;
}

// Define translations in script
const formTranslations = {
  en: {
    name: "Name",
    namePlaceholder: "Your name",
    email: "Email",
    emailPlaceholder: "your.email@example.com",
    phone: "Phone Number",
    phonePlaceholder: "Phone number",
    message: "Message",
    messagePlaceholder: "Your message here...",
    sendMessage: "Send Message",
    sending: "Sending...",
    messageSent: "Message Sent!",
    required: "This field is required",
    minLength: "Must be at least {0} characters",
    invalidEmail: "Please enter a valid email address",
    invalidPhone: "Please enter a valid phone number (6-14 digits)"
  },
  ar: {
    name: "الاسم",
    namePlaceholder: "اسمك",
    email: "البريد الإلكتروني",
    emailPlaceholder: "example@email.com",
    phone: "رقم الهاتف",
    phonePlaceholder: "رقم الهاتف",
    message: "الرسالة",
    messagePlaceholder: "اكتب رسالتك هنا...",
    sendMessage: "إرسال الرسالة",
    sending: "جاري الإرسال...",
    messageSent: "تم الإرسال!",
    required: "هذا الحقل مطلوب",
    minLength: "يجب أن يكون {0} أحرف على الأقل",
    invalidEmail: "يرجى إدخال بريد إلكتروني صحيح",
    invalidPhone: "يرجى إدخال رقم هاتف صحيح (6-14 رقم)"
  }
};

// Get current language from HTML attribute
const currentLang = document.documentElement.lang || 'en';
const t = formTranslations[currentLang as keyof typeof formTranslations] || formTranslations.en;

const validateField = (field: FormField): boolean => {
  const formGroup = field.closest('.form-group');
  const errorEl = formGroup?.querySelector('.error-message') as HTMLElement;
  
  if (!formGroup || !errorEl) return true;

  let isValid = true;
  let message = '';

  if (!field.value.trim()) {
    isValid = false;
    message = t.required;
  } else if ('minLength' in field && field.minLength && field.value.length < field.minLength) {
    isValid = false;
    message = t.minLength.replace('{0}', field.minLength?.toString() || '');
  } else if (field.type === 'email' && !field.value.includes('@')) {
    isValid = false;
    message = t.invalidEmail;
  } else if (field.type === 'tel' && !field.value.match(/^[0-9]{6,14}$/)) {
    isValid = false;
    message = t.invalidPhone;
  }

  if (!isValid) {
    errorEl.textContent = message;
    errorEl.classList.remove('hidden');
    field.classList.add('border-red-500');
  } else {
    errorEl.classList.add('hidden');
    field.classList.remove('border-red-500');
  }

  return isValid;
};

document.getElementById('contactForm')?.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const form = e.target as HTMLFormElement;
  const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
  const submitText = submitButton.querySelector('.submit-text') as HTMLElement;
  const submitSpinner = submitButton.querySelector('.submit-spinner') as HTMLElement;
  const statusEl = document.getElementById('formStatus');
  const fields = form.querySelectorAll('input, textarea, select');

  // Validate all fields
  let isValid = true;
  fields.forEach(field => {
    if (!validateField(field as FormField)) {
      isValid = false;
    }
  });

  if (!isValid) return;

  // Clear previous status
  if (statusEl) {
    statusEl.textContent = '';
    statusEl.className = 'text-center opacity-0 transform translate-y-2';
  }

  try {
    // Show loading state
    submitButton.disabled = true;
    submitText.textContent = t.sending;
    submitSpinner.classList.remove('hidden');

    // Get form data
    const formData = new FormData(form);
    const countryCode = formData.get('countryCode');
    const phoneNumber = formData.get('phone');
    
    const payload = {
      name: formData.get('name'),
      email: formData.get('email'),
      phone: `${countryCode}${phoneNumber}`,
      message: formData.get('message'),
      form_type: 'main',
      status: 'new'
    };

    const response = await fetch('/api/contact', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const result = await response.json() as FormResponse;

    if (result.success) {
      form.reset();
      submitText.textContent = t.messageSent;
      submitButton.classList.remove('bg-primary');
      submitButton.classList.add('bg-green-600');
      
      if (statusEl) {
        statusEl.textContent = result.message || 'Thank you for your message!';
        statusEl.classList.remove('opacity-0', 'translate-y-2', 'text-red-500');
        statusEl.classList.add('text-green-500', 'opacity-100', 'translate-y-0');
      }
    } else {
      throw new Error(result.message || 'Something went wrong');
    }
  } catch (error) {
    console.error('Error:', error);
    submitText.textContent = t.sendMessage;
    
    if (statusEl) {
      statusEl.textContent = error instanceof Error ? error.message : 'Failed to send message. Please try again.';
      statusEl.classList.remove('opacity-0', 'translate-y-2', 'text-green-500');
      statusEl.classList.add('text-red-500', 'opacity-100', 'translate-y-0');
    }
  } finally {
    submitButton.disabled = false;
    submitSpinner.classList.add('hidden');
  }
});

// Add live validation
document.getElementById('contactForm')?.addEventListener('input', (e) => {
  const target = e.target as FormField;
  if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA' || target.tagName === 'SELECT') {
    validateField(target);
  }
});
</script>