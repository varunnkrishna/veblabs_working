---
import { supportedLanguages } from '../../i18n/config';
import { useTranslations } from '../../i18n/utils';
import Layout from '../../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Ctaone from '../../components/Ctaone.astro';
import TestimonialMarquee from '../../components/TestimonialMarquee.astro';

export function getStaticPaths() {
  return Object.keys(supportedLanguages).map(lang => ({
    params: { lang }
  }));
}

const { lang } = Astro.params;
const t = useTranslations(lang as keyof typeof supportedLanguages);
const navT = await t('nav');
const ourworkT = await t('ourwork');
const projects = await getCollection('projects');
const categories = [...new Set(projects.map((project: CollectionEntry<'projects'>) => project.data.category))];

---

<Layout title={`${navT.works} | Veblabs`}>
  {/* Hero Section */}
  <div class="relative bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 overflow-hidden">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-10"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-blue-500/10 to-purple-500/10 dark:from-blue-500/20 dark:to-purple-500/20"></div>
    </div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24">
      <div class="text-center max-w-3xl mx-auto">
        <h1 class="text-4xl md:text-5xl lg:text-6xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 mb-6">
          {ourworkT.title}
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
          {ourworkT.description}
        </p>
      </div>
    </div>
  </div>

  {/* Categories */}
  <div class="bg-white dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex flex-wrap justify-center gap-4">
        <button
          class="category-filter px-4 py-2 rounded-full text-sm font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800/50 transition-colors active"
          data-category="all"
        >
          {ourworkT.all_projects}
        </button>
        {categories.map((category) => (
          <button
            class="category-filter px-4 py-2 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-blue-900/30 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            data-category={category}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  </div>

  {/* Projects Grid with Enhanced Background */}
  <div class="relative bg-gradient-to-br from-gray-50 via-white to-blue-50 dark:from-gray-900 dark:via-gray-800 dark:to-blue-900/20 min-h-screen">
    {/* Decorative Elements */}
    <div class="absolute inset-0 overflow-hidden">
      <div class="absolute -top-1/2 left-1/2 transform -translate-x-1/2 w-[1000px] h-[1000px] rounded-full bg-gradient-to-br from-blue-400/20 to-purple-400/20 dark:from-blue-500/10 dark:to-purple-500/10 blur-3xl"></div>
      <div class="absolute top-1/2 left-1/4 w-[300px] h-[300px] rounded-full bg-gradient-to-br from-blue-300/20 to-purple-300/20 dark:from-blue-400/10 dark:to-purple-400/10 blur-2xl"></div>
      <div class="absolute top-1/3 right-1/4 w-[250px] h-[250px] rounded-full bg-gradient-to-br from-purple-300/20 to-blue-300/20 dark:from-purple-400/10 dark:to-blue-400/10 blur-2xl"></div>
    </div>

    {/* Projects Grid */}
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24">
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        {projects.map((project: CollectionEntry<'projects'>, index: number) => (
          <a 
            href={`/${lang}/works/${project.slug}`} 
            class={`project-item group transform transition-all duration-500 hover:scale-[1.02] ${
              index % 3 === 0 ? 'md:col-span-2' : ''
            }`} 
            data-category={project.data.category}
          >
            <article class="h-full bg-white dark:bg-gray-800 rounded-2xl overflow-hidden shadow-lg transition-all duration-300 hover:shadow-xl backdrop-blur-sm bg-white/60 dark:bg-gray-800/60 border border-gray-200/50 dark:border-gray-700/50">
              <div class="aspect-[16/9] relative overflow-hidden">
                <img
                  src={project.data.image}
                  alt={project.data.title}
                  class="w-full h-full object-cover transform transition-transform duration-700 group-hover:scale-110"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>
              
              <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                  <span class="px-3 py-1 text-sm font-medium rounded-full bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400">
                    {project.data.category}
                  </span>
                </div>
                
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                  {project.data.title}
                </h3>
                
                <p class="text-gray-600 dark:text-gray-300 mb-4 line-clamp-2">
                  {project.data.description}
                </p>
                
                <div class="flex flex-wrap gap-2">
                  {project.data.tags?.slice(0, 3).map((tag: string) => (
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
                      {tag}
                    </span>
                  ))}
                  {project.data.tags && project.data.tags.length > 3 && (
                    <span class="px-2 py-1 text-xs font-medium rounded-full bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300">
                      +{project.data.tags.length - 3} more
                    </span>
                  )}
                </div>
              </div>
            </article>
          </a>
        ))}
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const filterButtons = document.querySelectorAll('.category-filter');
      const projectItems = document.querySelectorAll('.project-item');
      
      filterButtons.forEach((button: Element) => {
        button.addEventListener('click', () => {
          // Update active button styles
          filterButtons.forEach((btn: Element) => {
            btn.classList.remove('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-600', 'dark:text-blue-400');
            btn.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
          });
          button.classList.add('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-600', 'dark:text-blue-400');
          button.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');

          const selectedCategory = (button as HTMLElement).dataset.category;
          
          projectItems.forEach((item: Element) => {
            const htmlItem = item as HTMLElement;
            if (selectedCategory === 'all') {
              htmlItem.style.display = '';
              return;
            }
            
            const projectCategory = htmlItem.dataset.category;
            htmlItem.style.display = projectCategory === selectedCategory ? '' : 'none';
          });
        });
      });
    });
  </script>

  <TestimonialMarquee />
  <Ctaone />
</Layout>

<style>
  .category-filter.active {
    @apply bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400;
  }
</style>
