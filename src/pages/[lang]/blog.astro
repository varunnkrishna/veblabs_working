---
import { supportedLanguages } from '../../i18n/config';
import { useTranslations } from '../../i18n/utils';
import Layout from '../../layouts/Layout.astro';
import BlogGrid from '../../components/BlogGrid.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

export function getStaticPaths() {
  return Object.keys(supportedLanguages).map(lang => ({
    params: { lang }
  }));
}

const { lang = 'en' } = Astro.params;
const t = useTranslations(lang as keyof typeof supportedLanguages);

// Load translations with proper error handling
const navT = await t('nav').catch(() => ({ blog: 'Blog' }));
const blogT = await t('blog').catch(() => ({
  badge: 'Blog',
  title: 'Our Blog',
  description: 'Latest updates and articles',
  search_placeholder: 'Search articles...',
  all_posts: 'All Posts',
  newsletter: {
    title: 'Subscribe to our newsletter',
    description: 'Get the latest updates directly to your inbox',
    email_placeholder: 'Enter your email',
    subscribe: 'Subscribe'
  }
}));

// Get all posts and filter by language
const allPosts: CollectionEntry<'posts'>[] = await getCollection('posts');
const posts = allPosts.filter((post: CollectionEntry<'posts'>) => post.data.language === 'en');
const categories = [...new Set(posts.map((post: CollectionEntry<'posts'>) => post.data.category))].sort();

// Debug translations
console.log('Blog Translations:', blogT);
---

<Layout title={`${navT?.blog || 'Blog'} | Veblabs`}>
  <div class="relative bg-gradient-to-b from-blue-50 to-white dark:from-gray-900 dark:to-gray-800 overflow-hidden">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-10"></div>
      <div class="absolute inset-0 bg-gradient-to-b from-blue-500/10 to-purple-500/10 dark:from-blue-500/20 dark:to-purple-500/20"></div>
    </div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24">
      <div class="text-center max-w-3xl mx-auto">
        <span class="text-blue-600 dark:text-blue-400 font-semibold tracking-wide uppercase">{blogT?.badge}</span>
        <h1 class="mt-3 text-4xl md:text-5xl lg:text-6xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-400 dark:to-purple-400 mb-6">
          {blogT?.title}
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
          {blogT?.description}
        </p>
        
        <div class="max-w-2xl mx-auto">
          <div class="relative">
            <input
              type="search"
              id="search-input"
              placeholder={blogT?.search_placeholder}
              class="w-full px-6 py-4 rounded-xl border-2 border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:ring-opacity-20 transition-all duration-300"
            />
            <button class="absolute right-3 top-1/2 -translate-y-1/2 p-2 text-gray-400 hover:text-blue-500">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="bg-white dark:bg-gray-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <div class="flex flex-wrap justify-center gap-4">
        <button
          class="category-filter px-4 py-2 rounded-full text-sm font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800/50 transition-colors active"
          data-category="all"
        >
          {blogT?.all_posts}
        </button>
        {categories.map((category) => (
          <button
            class="category-filter px-4 py-2 rounded-full text-sm font-medium bg-gray-100 dark:bg-gray-800 text-gray-600 dark:text-gray-400 hover:bg-blue-100 dark:hover:bg-blue-900/30 hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
            data-category={category}
          >
            {category}
          </button>
        ))}
      </div>
    </div>
  </div>

  <BlogGrid posts={posts} lang={lang} />

  <div class="relative bg-gradient-to-r from-blue-600 to-purple-600 dark:from-blue-500 dark:to-purple-500">
    <div class="absolute inset-0">
      <div class="absolute inset-0 bg-[url('/images/grid.svg')] opacity-10"></div>
      <div class="absolute inset-0 bg-black/10"></div>
    </div>
    
    <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12 md:py-16">
      <div class="max-w-2xl mx-auto text-center">
        <h2 class="text-3xl font-bold text-white mb-4">
          {blogT?.newsletter?.title}
        </h2>
        <p class="text-lg text-white/90 mb-8">
          {blogT?.newsletter?.description}
        </p>
        <form class="flex flex-col sm:flex-row gap-4 max-w-xl mx-auto">
          <input
            type="email"
            placeholder={blogT?.newsletter?.email_placeholder}
            class="flex-1 px-6 py-4 rounded-xl bg-white/10 border border-white/20 text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/40"
          />
          <button
            type="submit"
            class="px-8 py-4 bg-white text-blue-600 font-semibold rounded-xl hover:bg-blue-50 transition-all duration-300 whitespace-nowrap"
          >
            {blogT?.newsletter?.subscribe}
          </button>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script>
  function initializeFilters() {
    const filterButtons = document.querySelectorAll<HTMLButtonElement>('.category-filter');
    const blogPosts = document.querySelectorAll<HTMLElement>('.blog-post');
    const searchInput = document.getElementById('search-input') as HTMLInputElement;

    // Category filtering
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const category = button.getAttribute('data-category');
        
        // Update active state
        filterButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-600', 'dark:text-blue-400');
          btn.classList.add('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
        });
        
        button.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'text-gray-600', 'dark:text-gray-400');
        button.classList.add('active', 'bg-blue-100', 'dark:bg-blue-900/30', 'text-blue-600', 'dark:text-blue-400');
        
        // Filter posts
        blogPosts.forEach(post => {
          if (!post) return;
          const postCategory = post.getAttribute('data-category');
          post.style.display = category === 'all' || category === postCategory ? 'block' : 'none';
        });
      });
    });

    // Search functionality
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const searchTerm = target.value.toLowerCase();
        
        blogPosts.forEach(post => {
          if (!post) return;
          const title = post.querySelector('h2')?.textContent?.toLowerCase() || '';
          const excerpt = post.querySelector('p')?.textContent?.toLowerCase() || '';
          
          post.style.display = title.includes(searchTerm) || excerpt.includes(searchTerm) ? 'block' : 'none';
        });
      });
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initializeFilters);

  // Initialize when Astro swaps pages
  document.addEventListener('astro:page-load', initializeFilters);
</script>
